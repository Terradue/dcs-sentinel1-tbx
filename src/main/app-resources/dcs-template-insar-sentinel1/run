#!/bin/bash
#
#Sentinel 1 Toolbox development template 

# source the ciop functions (e.g. ciop-log)
source ${ciop_job_include}

# define the exit codes
SUCCESS=0
ERR_GETDATA=10
ERR_DOWNLOAD=20
ERR_EXTRACT=30
ERR_PROCESS=40
ERR_PUBLISH=50

#####################################################
#                                                   #
#                      main                         #
#                                                   #
#####################################################

function cleanExit () {
  # add a trap to exit gracefully
  local retval=$?
  local msg=""

  case $retval in
    $SUCCESS) msg="Processing successfully concluded";;
    $ERR_GETDATA) msg="Error while discovering product";;
    $ERR_DOWNLOAD) msg="Failed to download product";;
    $ERR_EXTRACT) msg="Failed to extract product";;
    $ERR_PROCESS) msg="Failed during process execution";;
    $ERR_PUBLISH) msg="Failed to publish results";;
    *) msg="Unknown error";;
  esac
  [ $retval -ne 0 ] && ciop-log "ERROR" "Error $retval - $msg, processing aborted" || ciop-log "INFO" "$msg"
  exit $retval
}

trap cleanExit EXIT

get_data() {
  local ref=$1
  local target=$2
  local local_file
  local enclosure
  local res

  [ "${ref:0:7}" == "file://" ] || [ "${ref:0:6}" == "ftp://" ] || [ "${ref:0:5}" == "s3://" ] || [ "${ref:0:1}" == "/" ] && enclosure=${ref}

  [ -z "$enclosure" ] && enclosure=$( opensearch-client "${ref}" enclosure ) 
  res=$?
  enclosure=$( echo ${enclosure} | tail -1 )
  [ $res -eq 0 ] && [ -z "${enclosure}" ] && return ${ERR_GETDATA}
  [ $res -ne 0 ] && enclosure=${ref}

  local_file="$( echo ${enclosure} | ciop-copy -f -U -O ${target} - 2> /dev/null )"
  res=$?
  [ ${res} -ne 0 ] && return ${res}
  echo ${local_file}
}

function clean() {
  # free space
  rm -rf ${TMPDIR}/downloads
}

function main() {
  #main execution function
  ciop-log "INFO" "downloading file $1"
  sourceFile=$( get_data $1 ${TMPDIR}/downloads )
  [ $? -ne 0 ] && return ${ERR_DOWNLOAD}

  targetFile=$( echo "${sourceFile}" | sed 's#\.zip#tif#g' )
  #now we can run gpt to get our GeoTIFF
  /usr/bin/gpt /application/dcs-template-insar-sentinel1/SAR.xml -Pmysource="${sourceFile}" -Pmytarget="${targetFile}"
  [ $? -ne 0 ] && return ${ERR_PROCESS}

  #we can now publish the output
  ciop-publish -m "${targetFile}"
  [ $? -ne 0 ] && return ${ERR_PUBLISH}

  return $SUCCESS

}

#####################################################
#                                                   #
#                      main                         #
#                                                   #
#####################################################


#creating the temporary structure
TMPDIR=${TMPDIR}/$( uuidgen )
mkdir -p ${TMPDIR}/downloads

# loop through the files
while read sourceFile
do
    #executing main on the file
    main "${sourceFile}"
    res=$?
    [ ${res} -ne 0 ] && exit ${res}

    #cleaning up dir
    clean
    exit ${SUCCESS}
done

