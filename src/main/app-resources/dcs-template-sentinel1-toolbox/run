#!/bin/bash
#
#Sentinel 1 Toolbox development template 

# source the ciop functions (e.g. ciop-log)
source ${ciop_job_include}

# define the exit codes
SUCCESS=0
ERR_INPUT=10
ERR_GETDATA=20
ERR_DOWNLOAD=30
ERR_EXTRACT=40
ERR_PROCESS=50
ERR_PUBLISH=60

#####################################################
#                                                   #
#                      main                         #
#                                                   #
#####################################################

function cleanExit () {
  # add a trap to exit gracefully
  local retval=$?
  local msg=""

  case $retval in
    $SUCCESS) msg="Processing successfully concluded";;
    $ERR_INPUT) msg="Input is not in the form source1;source2;swath";;
    $ERR_GETDATA) msg="Error while discovering product";;
    $ERR_DOWNLOAD) msg="Failed to download product";;
    $ERR_EXTRACT) msg="Failed to extract product";;
    $ERR_PROCESS) msg="Failed during process execution";;
    $ERR_PUBLISH) msg="Failed to publish results";;
    *) msg="Unknown error";;
  esac
  [ $retval -ne 0 ] && ciop-log "ERROR" "Error $retval - $msg, processing aborted" || ciop-log "INFO" "$msg"
  exit $retval
}

trap cleanExit EXIT

get_data() {
  local ref=$1
  local target=$2
  local local_file
  local enclosure
  local res

  [ "${ref:0:7}" == "file://" ] || [ "${ref:0:6}" == "ftp://" ] || [ "${ref:0:5}" == "s3://" ] || [ "${ref:0:1}" == "/" ] && enclosure=${ref}

  [ -z "$enclosure" ] && enclosure=$( opensearch-client "${ref}" enclosure ) 
  res=$?
  enclosure=$( echo ${enclosure} | tail -1 )
  [ $res -eq 0 ] && [ -z "${enclosure}" ] && return ${ERR_GETDATA}
  [ $res -ne 0 ] && enclosure=${ref}

  local_file="$( echo ${enclosure} | ciop-copy -f -U -O ${target} - 2> /dev/null )"
  res=$?
  [ ${res} -ne 0 ] && return ${res}
  echo ${local_file}
}

function get_ROEORB() {
  
  local S1_ref=$1
  local aux_dest=$2
  local startdate=$3
  local enddate=$4

  [ -z "${aux_dest}" ] && aux_dest="."

  [ -z "${startdate}" ] && startdate="$( opensearch-client "${S1_ref}" startdate)"

  [ -z "${enddate}" ] && enddate="$( opensearch-client "${S1_ref}" enddate)"

  aux_list=$( opensearch-client  "http://data.terradue.com/gs/catalogue/aux/gtfeature/search?q=AUX_RESORB&start=${startdate}&stop=${enddate}" enclosure )

  [ -z "${aux_list}" ] && return 1

  echo ${aux_list} | ciop-copy -o ${aux_dest} -

}

function clean() {
  # free the used TMPDIR before next input
  rm -rf $1/downloads $1/output
}

function main() {
  # main execution function
  source1="$( echo "$1" | cut -d ';' -f 1 )"
  source2="$( echo "$1" | cut -d ';' -f 2 )"
  swath="$( echo "$1" | cut -d ';' -f 3 )"
  TMPDIR="$2"

  ciop-log "INFO" "source1: ${source1}"
  ciop-log "INFO" "source2: ${source2}"
  ciop-log "INFO" "swath: ${swath}"

  [ -z "${source1}" ] || [ -z "${source2}" ] || [ -z "${swath}" ] && return ${ERR_INPUT}

  orbit_type=$( ciop-getparam "orbit_type" )
  [ "${orbit_type}" == "RESTITUTED" ] && {
	get_RESORB ${source1} ${TMPDIR}/aux
        get_RESORB ${source2} ${TMPDIR}/aux
 	orbit_param="Sentinel Restituted" 
  } || orbit_param="Sentinel Precise (Auto Download)" 
  

  ciop-log "INFO" "downloading source1"
  source1=$( get_data "${source1}" "${TMPDIR}/downloads" )
  [ $? -ne 0 ] && return ${ERR_DOWNLOAD}

  ciop-log "INFO" "downloading source2"
  source2=$( get_data "${source2}" "${TMPDIR}/downloads" )
  [ $? -ne 0 ] && return ${ERR_DOWNLOAD}

  # now we can compute the target filename
  cd "${TMPDIR}/downloads"
  targetFile="$( ls | tr -s "_" | cut -d "_" -f 5,6 | tr '_' '\n' | sort -u | tr '\n', ',' | cut -d ',' -f 1,4 | tr ',' '_' )"
  ciop-log "INFO" "target filename: ${targetFile}"

  # now we can run gpt to get our dim
  cd ${TMPDIR}/output
  ciop-log "INFO" "running Sentinel 1 toolbox"
  export AuxDataPath="${TMPDIR}/aux"
  /usr/bin/gpt /application/dcs-template-sentinel1-toolbox/TOPSAR-Coreg-Interferometry.xml -Psource1="${source1}" -Psource2="${source2}" -Ptarget="${targetFile}" -Pswath="${swath}" -Porbit_type="${orbit_param}" # 2> /dev/null
  [ $? -ne 0 ] && return ${ERR_PROCESS}

  # creating png/tiff for each band
  i_band=$( grep '<BAND_NAME>i_' ${targetFile}.dim | sed 's#.*>\(i_.*\)<.*#\1#g' )
  q_band=$( grep '<BAND_NAME>q_' ${targetFile}.dim | sed 's#.*>\(q_.*\)<.*#\1#g' )
  c_band=$( grep '<BAND_NAME>coh_' ${targetFile}.dim | sed 's#.*>\(coh_.*\)<.*#\1#g' )
  intensity_band=$( grep '<BAND_NAME>Intensity_' ${targetFile}.dim | sed 's#.*>\(Intensity_.*\)<.*#\1#g' )
  phase_band=$( grep '<BAND_NAME>Phase_' ${targetFile}.dim | sed 's#.*>\(Phase_.*\)<.*#\1#g' )

  # physical bands
  for myband in $( echo "${i_band} ${q_band} ${c_band}" )
  do
    /usr/bin/gpt /application/dcs-template-sentinel1-toolbox/outputRealBand.xml -Psource=${targetFile}.dim -Pband=${myband}
  done

  # virtual bands
  /usr/bin/gpt /application/dcs-template-sentinel1-toolbox/outputVirtualBand.xml -Psource=${targetFile}.dim -Pband=${intensity_band} -Pexpression="${i_band} * ${i_band} + ${q_band} * ${q_band}"
  /usr/bin/gpt /application/dcs-template-sentinel1-toolbox/outputVirtualBand.xml -Psource=${targetFile}.dim -Pband=${phase_band} -Pexpression="atan2(${q_band},${i_band})"

  # we can now prepare the zipped output
  ciop-log "INFO" "zipping output"
  tar cvfz ${targetFile}.tgz ${targetFile}.dim ${targetFile}.data *.tif &> /dev/null
  rm -rf ${targetFile}.dim ${targetFile}.data

  # create a 10% version of the tif file
  for myfile in $( ls *.tif )
  do
    basefile="$( echo ${myfile} | sed 's#\.tif##g' )"

    # create a 10% version of the tif file (both tif and png)
    gdal_translate -outsize 10% 10% -ot Byte ${basefile}.tif ${basefile}_small.tif
    gdal_translate -outsize 10% 10% -of PNG -ot Byte -a_nodata 0 ${basefile}.tif ${basefile}_small.png
    # retrieves the spatial info
    listgeo -tfw ${basefile}_small.tif
    mv ${basefile}_small.tfw ${basefile}_small.pngw
    rm -rf ${myfile} ${basefile}_small.tif
  done

  ciop-log "INFO" "publishing output"
  res=0
  for myfile in $( find ${TMPDIR}/output -type f -name "*.tif" -o -name "*.tgz" -o -name "*.png" -o -name "*.pngw")
  do
    ciop-publish -m ${myfile}
    res=$(( $res + $? ))
  done

  [ $res -ne 0 ] && return ${ERR_PUBLISH}

  return $SUCCESS

}

#####################################################
#                                                   #
#                      main                         #
#                                                   #
#####################################################


#creating the temporary structure
#TMPDIR=${TMPDIR}/$( uuidgen )
TMPDIR=/tmp/$( uuidgen )

# loop through the files
while read sourceInput
do
    mkdir -p ${TMPDIR}/downloads
    mkdir -p ${TMPDIR}/output

    #executing main on the file
    main "$( echo "${sourceInput}" | sed 's#\$#\\$#g' )" "${TMPDIR}"
    res=$?
    [ ${res} -ne 0 ] && exit ${res}

    #cleaning up dir
    clean "${TMPDIR}"
done

ciop-log "INFO" "cleaning up temporary directory"
rm -rf "${TMPDIR}"

ciop-log "INFO" "That's all folks!"
exit $SUCCESS

